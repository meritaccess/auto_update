$(document).ready(function () {
	var $tableEl = $('#data-table');
	var table = $tableEl.DataTable({
		dom: '<"#data-table-header"f>r<"#data-table-scroll"t><"#data-table-footer"lip>',
		processing: true,
		language: {
			processing: 'Loading...',
			search: 'Filter',
			paginate: { first: '«', previous: '‹', next: '›', last: '»' }
		},
		order: [],
		pageLength: 50,
		pagingType: 'full',
		stateSave: true,
		drawCallback: function () {
			var info = this.api().page.info();
			if (info.pages === 1) {
				$('.dt-length, .dt-paging').addClass('hidden-area');
			} else {
				$('.dt-length, .dt-paging').removeClass('hidden-area');
			}
		}
	});
	var TABLE_NODE = $tableEl.get(0);
	function hideDeletedFilter(settings, data, dataIndex) {
		if (settings.nTable !== TABLE_NODE) return true;
		return !$(table.row(dataIndex).node()).hasClass('tr-deleted');
	}
	$.fn.dataTable.ext.search.push(hideDeletedFilter);
	var $searchWrap = $('#data-table-header .dt-search');
	if ($searchWrap.length) {
		var $btn = $('<button type="button" class="dt-toggle-blocked">Show blocked</button>');
		$btn.on('click', function () {
			var active = $(this).hasClass('active');
			if (active) {
				$(this).removeClass('active').text('Show blocked');
				if ($.fn.dataTable.ext.search.indexOf(hideDeletedFilter) === -1) {
					$.fn.dataTable.ext.search.push(hideDeletedFilter);
				}
			} else {
				$(this).addClass('active').text('Hide blocked');
				var idx = $.fn.dataTable.ext.search.indexOf(hideDeletedFilter);
				if (idx > -1) $.fn.dataTable.ext.search.splice(idx, 1);
			}
			table.draw(false);
		});
		$btn.insertAfter($searchWrap.find('input'));
	}
	table.on('init.dt', function () {
		var state = table.state.loaded();
		if (state) table.page(state.start / state.length).draw(false);
	});
	$('#copy-data').on('click', function () {
		var start1 = $('#tempstart1').val();
		var end1   = $('#tempend1').val();
		var start2 = $('#tempstart2').val();
		var end2   = $('#tempend2').val();
		$('input[id$="start1"]').not('#tempstart1').val(start1);
		$('input[id$="end1"]').not('#tempend1').val(end1);
		$('input[id$="start2"]').not('#tempstart2').val(start2);
		$('input[id$="end2"]').not('#tempend2').val(end2);
	});
	$("#infobtn").fancybox({
		width: 800,
		height: 'auto',
		maxWidth: 800,
		maxHeight: 600,
		autoSize: false,
		fitToView: false,
		titlePosition: 'inside',
		transitionIn: 'none',
		transitionOut: 'none',
		onStart: null,
		onClosed: null,
		preventScroll: true,
		touch: false
	});
	function fetchServerTime() {
		$.ajax({
			type: 'POST',
			url: '',
			data: { action: 'get_time' }
		})
		.done(function (data) {
			$('#datetime1, #datetime2').text(data);
		})
		.fail(function () {
			console.error('Failed to get date and time from server.');
		});
	}
	setInterval(fetchServerTime, 5000);
	fetchServerTime();
	$('.table-container-scroll').hide();
	$('.data-table-cap').on('click', function () {
		$(this).next('.table-container-scroll').fadeToggle();
		$(this).find('span').toggleClass('cap-plus cap-minus');
	});
	function formatDate(date) {
		var yyyy = date.getFullYear();
		var mm = ('0' + (date.getMonth() + 1)).slice(-2);
		var dd = ('0' + date.getDate()).slice(-2);
		var hh = ('0' + date.getHours()).slice(-2);
		var min = ('0' + date.getMinutes()).slice(-2);
		var ss = ('0' + date.getSeconds()).slice(-2);
		return yyyy + '-' + mm + '-' + dd + ' ' + hh + ':' + min + ':' + ss;
	}
	var serverTimeElem = document.getElementById('server-time');
	if (serverTimeElem) {
		var serverTimeStr = serverTimeElem.getAttribute('data-time');
		var serverTime = new Date(serverTimeStr.replace(' ', 'T'));
		var clientTime = new Date();
		var clientTimeStr = formatDate(clientTime);
		var diffSeconds = Math.abs((serverTime - clientTime) / 1000);
		var statusDiv = document.getElementById('server-time-status');
		if (statusDiv) {
			if (diffSeconds <= 300) {
				statusDiv.innerHTML = '<p>The time on the unit looks OK (difference ≤ 5 minutes).</p>';
				statusDiv.classList.remove('server-time-status-error');
				statusDiv.classList.add('server-time-status-ok');
			} else {
				statusDiv.innerHTML = '<p>The time on the unit is not up to date, it needs to be synchronized! In the <a href="./?v=more">More menu, click Sync time and restart</a>!</p>';
				statusDiv.classList.remove('server-time-status-ok');
				statusDiv.classList.add('server-time-status-error');
			}
		}
	}
	$('#resync a').on('click', function (e) {
		e.preventDefault();
		if (!confirm('Are you sure you want to sync and restart the unit?')) return;
		var clientTimeStr = formatDate(new Date());
		$.ajax({
			type: 'POST',
			url: './?v=running;s=resync',
			data: { client_time: clientTimeStr }
		})
		.always(function () {
			window.location.href = './?v=more;f=alert';
		});
	});
	initTimeHHMMSS();
});
function initTimeHHMMSS() {
	$(".time-hhmmss").attr('maxlength', '8');
	$(".time-hhmmss").on({
		keydown: CheckNum,
		blur: formateHHMMSS,
		focus: unformateHHMMSS
	});
}
function CheckNum(e) {
	if ($.inArray(e.keyCode, [46, 8, 9, 27, 13]) !== -1 ||
		(e.keyCode === 65 && (e.ctrlKey === true || e.metaKey === true)) ||
		(e.keyCode >= 35 && e.keyCode <= 40)) {
		return;
	}
	if ((e.keyCode < 48 || e.keyCode > 57) && (e.keyCode < 96 || e.keyCode > 105)) {
		e.preventDefault();
	}
}
function unformateHHMMSS() {
	$(this).val($(this).val().replace(/:/g, ''));
}
function formateHHMMSS() {
	var str = $(this).val();
	if (str.length > 4) {
		str = ('0' + str).slice(-6);
	} else if (str.length > 2) {
		str = ('0' + str + '00').slice(-6);
	} else {
		str = ('0' + str + '0000').slice(-6);
	}
	var ss = parseInt(str.substr(4, 2), 10);
	var mm = parseInt(str.substr(2, 2), 10);
	var hh = parseInt(str.slice(0, 2), 10);
	if (ss > 59) ss = 59;
	if (mm > 59) mm = 59;
	if (hh > 23) hh = 23;
	ss = ('0' + ss).slice(-2);
	mm = ('0' + mm).slice(-2);
	hh = ('0' + hh).slice(-2);
	var formate = hh + ':' + mm + ':' + ss;
	$(this).val(formate);
}